依赖HyCLR热更方案   要求Unity版本最低2020.3.21/2021.3.0以上  
git@gitee.com:focus-creative-games/hybridclr_unity.git
框架开发版本确定跟随HyCLR使用2020.3.33版本开发,后续框架工具集也将基于这个版本进行开发
(有些工具是反射的UnityEditor源码进行调用,不同的大版本因为UnityAPI变化会反射失败)

类似Unity生命周期系统
服务端客户端代码共用,目前已提供的生命周期,带参Awake,Update,LateUpdate,Destory (Enable,Disable已实现,但实际开发中基本不需要用到,考虑删除)

生命周期系统的实现方案推导
动态反射首先排除,性能差,可读性差,不能查引用
接口排除,因为接口必须实现,没办法数据逻辑分离
继承排除,继承不能组合,会有大量空调用
泛型工具,泛型工具类是离散的,可就单一生命周期具体实现,可以随意组合

热更新边界
既然做热更,自然期望尽可能都可以热更,除了第三方插件和AOT引导层外,所有内容连框架本身都可以热更

程序集划分如下,排序就是加载顺序 从上到下
AOT  (随主包)
	Package.Runtime			插件层,需要被JIT脚本调用的插件脚本,不需要被脚本直接调用的可以不放里面,或者给Veiw层添加程序集引用
	Boot					AOT引导层,提供框架入口和最基础的启动设施

	--Package.Editor          编辑器层会被剥离--
	--Assembly-CSharp-Editor  编辑器层会被剥离--

JIT  (热更新)
	Core					框架核心,基础设施   客户端服务端代码共用  提供一个类似Unity的生命周期系统和组件式的Entity-Component挂载功能
	Data					公共组件数据层     数据结构程序集  不能继承Unity的类或者调用Unity类的方法 一般是共用的数据结构或者网络协议定义等
	Func					公共组件逻辑层     纯逻辑程序集 只写拓展方法 实现服务端逻辑热重载就是用的这个程序集 一般写通用算法
	View					客户端表现层     需要调用到UnityAPI或者插件API的写在这里  服务端没有这部分API  基本上所有和引擎相关的前端功能
	Assembly-CSharp			Unity默认程序集,最顶层的程序集,放在JIT(则可以热更新,但挂在了脚本的资源必须从AB包加载) 放在AOT(则不能热更新,但可以随便挂脚本,和默认一样)

View层和Assembly-CSharp程序集基本等效,建议全部写在View层里面

程序集命名的原则
1期望文字简短
2解决方案中的排序是以名称排序的所以期望名称排序和程序集的依赖关系/加载顺序能对应上
3插件层基本上不会改动其源码 得排在边缘位置
4含义要接近

热更DLL文件命名规则的改动依据
客户端不需要做热重载,客户端做不重启更新会引入很多问题,一是对代码要求更高,二是做对象清理的时候容易遗漏,三是静态变量常量修改可能出现意外问题
重载DLL实现工程逻辑切换的功能已实现,但对不同工程的基础环境要求较高,尤其是第三方插件依赖需求不一致,而且容易出现配置不一致的问题,实用性差,约束太大,决定放弃
所以客户端DLL并不需要重复加载,即程序集命名可以固定名称不再需要带项目代号/版本号(之前是 项目代号+版本号作为dll名称,因为unity的优化机制同名程序集不能重复加载)

编译流程
热更程序集有4个,开发时使用编译宏扫描4个程序集,基于HybridCLR的实现原理,修改工具流

    /* 程序集加载流程
     * 脚本热更新依赖HybridCLR
     * 先读配置文件 确定流程分支   Resources.Load
     * --------------1 可热更平台+有网络条件(远程更新)--------------
     * 下载MD5文件对比清单
     * 文件对比流程
     * 下载补丁文件
     * 加载程序集
     * 补充元数据
     * 加载程序集
     * 扫描特性
     * 启动入口
     * 
     * --------------2 可热更平台+无网络条件(离线更新,仅Win项目,直接操作文件方便)--------------
     * 和热更流程一样,没有文件对比流程,直接从本地读程序集加载
     *  
     * --------------3 不可热更平台(Hololens,任天堂之类的)--------------
     * 脚本加载流程和Unity默认工作流一致,资源加载流程走本地AB包
     * 
     * --------------4 编辑器环境--------------
     * 脚本加载流程和Unity默认工作流一致,不构建AB包,使用EditorAPI直接LoadAB包
     * 
     * --------------5 有热更条件但懒得走热更流程(临时开发项目)------------
     * 和Unity默认工作流一致
     * 
     * 综合起来就是三种模式 远程更新/本地更新/不更新
     */

